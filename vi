Monitoring is accomplished through the usage of CloudWatch, which is a service to monitor your AWS resources as well as the applications that you run on AWS.

CloudWatch Monitoring:

Can monitor EC2 instances, Autoscaling Groups, ELBs, Route53 Health Checks, EBS Volumes, Storage Gateways, CloudFront, DynamoDB, ElastiCache nodes, RDS instances, EMR Job Flows, Redshift. SNS topics, SQS Queues, OpsWorks, CloudWatch Logs, Estimated charges on your AWS bill, and custom metrics - logs generated by your applications and services.
EC2 will by default monitor your instances @5 minute intervals
EC2 instances can monitor your instances @1 minute intervals if the ‘detailed monitoring’ option is set on the instance
By default CloudWatch will monitor CPU, Network, Disk, and Status Checks
RAM utilization is a custom metric and must be added manually to EC2 instances in order to be tracked.
2 types of Status Checks:
System Status Checks (Physical Host):
Checks the underlying physical host
Checks for loss of network connectivity
Checks for loss of system power
Checks for software issues on the physical host
Checks for hardware issues on the physical host
Best way to resolve issues is to stop the instance and start it again (will switch physical hosts)
Instance Status Checks
Checks the VM itself
Checks for failed system status checks
Checks for mis-configured networking or startup configs
Checks for exhausted memory
Checks for corrupted file systems
Checks for an incompatible kernel
Best way to troubleshoot is rebooting the instance or modifying the instance OS
By default CloudWatch metrics are stored for 2 weeks
Can retrieve data that is longer than 2 weeks using the GetMetricStatistics API endpoint, or by using third party tools
Can retrieve data from any terminated EC2 or ELB instance for up to 2 weeks after its termination
Many default metrics for many default services are 1 min, but it can be 3-5 minutes depending on the service
Custom metrics have a minimum 1 minute granularity
Alarms can be created to monitor any CloudWatch metric in your account
Alarms can include EC2, CPU, ELB, Latency, or even changes on your AWS bill
Within the alarm, actions can be set, triggering things like lambda functions, or SNS notifications if the alarm threshold is reached

================================================================================================================================================================================================

Configuring custom metrics:

In order to allow custom metrics to be written to CloudWatch, you must assign a CloudWatch full access role to the EC2 instance using the custom metrics.
RAM utilization for example must be set up as a custom metric
yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https
mkdir /CloudWatch && cd /CloudWatch
wget http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip
unzip CloudWatchMonitoringScripts-v1.2.1.zip
rm -fr CloudWatchMonitoringScripts-v1.2.1.zip
cd aws-scripts-mon
./mon-put-instance-data.pl –mem-util –verify –verbose (dry run no data will be sent to CloudWatch)
./mon-put-instance-data.pl –mem-util –mem-used –mem-avail (set this up on 1/5 minute cron job)
Set Cron job to run regulary (/5 ** * ec2-user /CloudWatch/mon-put-instance-data.pl –mem-util –mem-used)


===========================================================================================================================================================================================================

Monitoring EBS:


Types of EBS Storage: General Purpose (SSD) - gp2, Provisioned IOPS (SSD) - io1, Throughput Optimized (HDD) - st1, Cold (HDD) - sc1.
Usage: ST1 and SC1 cannot be used as boot volumes; they appear in the dropdown list only for additional volumes.
GP2 Performance: Base of 3 IOPS per GiB, max volume size 16 TB, max IOPS 10K, can burst up to 3K IOPS using I/O credits.
Bursting and Credits: Initial 5.4 million I/O credits sustain max burst for 30 minutes; credits are replenished when not bursting.
Initialization: New volumes do not require pre-warming; restored volumes may see 5-50% IOPS loss initially, which can be avoided by pre-warming.
CloudWatch Metrics: Includes VolumeReadBytes, VolumeWriteBytes, VolumeReadOps, VolumeWriteOps, VolumeTotalReadTime, VolumeTotalWriteTime, VolumeIdleTime, VolumeQueueLength, and others.
Provisioned IOPS Metrics: VolumeThroughputPercentage and VolumeConsumedReadWriteOps provide detailed performance data.
Status Checks: EBS volumes can have statuses like OK, Warning, Impaired, and Insufficient Data, indicating their I/O and performance state.
Modifications: EBS volumes attached to current-gen EC2 instances can be resized, changed in type, or have IOPS adjusted without detachment.
Monitoring Modifications: Track progress via Volumes Console/API, and extend file systems post size modification to utilize increased capacity.


===========================================================================================================================================================================================================

Monitoring ELB:

Monitored every 60 seconds provided there is traffic
Only reports when requests are flowing through the LB
If there are no requests or data for a given metric, the metric will not be reported to CloudWatch
If there are requests flowing through the LB, ELB will measure and send metrics for that LB in 60 second intervals
Available Metrics:
HealthyHostCount:
The count of the number of healthy instances in each AZ
Hosts are declared healthy if they meet the threshold for the number or consecutive health checks that are successful
Hosts that have failed more health checks then the value of the unhealthy threshold are considered unhealthy
If cross-zone is enabled, the count of the number of healthy instances is calculated for all AZs
Preferred Statistic: Average
UnHealthyHostCount:
The count of the number of unhealthy instances in each AZ
Hosts that have failed more health cheeks than the value of the unhealthy threshold are considered unhealthy
If cross-zone is enabled, the count of the number of unhealthy instances is calculated for all AZs
Instances may become unhealthy due to connectivity issues, health checks returning non-200 responses (in the case of HTTP or HTTPS health checks), or timeouts when performing the health check
Preferred Statistic: Average
RequestCount:
The count of the number of completed requests that were received and routed to the back end instances
Preferred Statistic: Sum
Latency:
Measures the time elapsed in seconds after the request leaves the load balancer until the response is received
Preferred Statistic: Average
HTTPCode_ELB_4XX
The count of the number of HTTP 4XX client error codes generated by the load balancer when the listener is configured to use HTTP or HTTPS protocols. Client errors are generated when a request is malformed or is incomplete
Preferred Statistic: Sum
HTTPCode_ELB_5XX
The count of the number or HTTP 5XX server error codes generated by the load balancer when the listener is configured to use HTTP or HTTPS protocols
This metric does not include any responses generated by back end instances
The metric is reported if there are no back-end instances that are healthy or registered to the load balancer, or if the request rate exceeds the capacity of the instances or the load balancers
Preferred Statistic: Sum
HTTPCode_Backend_2XX:
HTTPCode_Backend_3XX:
HTTPCode_Backend_4XX:
HTTPCode_Backend_5XX:
The count of the number of HTTP response codes generated by back-end instances
Metric does not include any response codes generated by the load balancer
The 2XX class status codes represent successful actions
The 3XX class status codes indicate that the user agent requires action
The 4XX class status code represents client errors
The 5XX class status code represents back-end server errors
Preferred Statistic: Sum
BackendConnectionErrors:
The count of the number of connections that were not successfully established between the LB and the registered instances
The LB will retry when there are connection errors, so the count can exceed the request rate
Preferred Statistic: Sum
SurgeQueueLength:
A count of the total number of requests that are pending submission to a registered instance
Preferred Statistic: Max
SpilloverCount:
A count of the total number of requests that were rejected due to the queue being full
Preferred Statistic: Sum
Have an idea of what each metric does
Important metrics to note are SurgeQueueLength & SpilloverCountt
